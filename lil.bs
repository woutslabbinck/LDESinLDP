<pre class='metadata'>
Title: Writing Linked Data Event Streams in LDP Basic Containers
Shortname: LDESinLDP
Level: 1
Status: LD
Group: TREE community group
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Editor: Wout Slabbinck
!Issue Tracking: [Issues](https://github.com/woutslabbinck/LDESinLDP/issues/)
!Issue Tracking: [Github](https://github.com/woutslabbinck/LDESinLDP/)
Repository:no
Abstract: Writing to a time-based fragmented Linked Data Event Stream that is stored on a Linked Data Platform.
</pre>

<pre class=biblio> 
{"ldes": {
	"href":"https://w3id.org/ldes/specification",
	"authors": [
			"Pieter Colpaert"
		],
		"title": "Linked Data Event Streams",
		"status": "LS"
	},
"tree":{
	"href":"https://w3id.org/tree/specification",
	"authors": [
			"Pieter Colpaert"
		],
		"title":"The TREE hypermedia specification",
		"status": "LS"
	},   
"shex": {
    "href": "http://shex.io/shex-semantics/index.html",
    "title": "Shape Expressions Language 2.1",
    "authors": [
        "Eric Prud'hommeaux",
        "Iovka Boneva",
        "Jose Emilio Labra Gayo",
        "Gregg Kellogg"
		]
    },
"solid": {
    "href": "https://solidproject.org/TR/protocol",
    "title": "Solid Protocol",
	"authors": [
        "Sarven Capasdisli",
        "Tim Berners-Lee",
        "Kjetil Kjernsmo",
        "Justin Bingham",
        "Ruben Verborgh",
        "Dmitri Zagidulin"]
    },
"wac": {
    "href": "https://solidproject.org/TR/wac",
    "title": "Web Access Control",
	"authors": [
        "Sarven Capasdisli"],
	"publisher":"W3C Solid Community Group",
	"status":"Draft",
	"data":"11 July 2021"
    }
}
</pre>

Introduction {#introduction}
=====================

We coin the term **LDES in LDP** to describe a time-based fragmented  [[!LDES]] that is stored on a Linked Data Platform [[!LDP]].
Which allows interacting with LDESs using the LDP API. Furthermore, when a [[!Solid]] server is used as [[!LDP]], authorisation over the LDES is provided.

LDES in LDP Protocol {#ldesinldp}
=====================
<figure id="architecture">
<img src="./img/LDESinLDP_Architecture.png">
<figcaption>Architecture of a Linked Data Event Stream in an LDP Container</figcaption>
</figure>

The **LDES in LDP** Protocol consists of the structure and the rules to initialise, append to and create a new fragment to a continuously growing time-based fragmented [[!LDES]] that is stored in an [[!LDP]].

The structure is visualized in the <a href="#architecture">figure</a> above and can be summarized in the following components:

* The `ldp:BasicContainer`, identifyable with an [[!URL]], which is the base of the **LDES in LDP**
* The **root** of the [[!LDES]]
* The fragments
* (Optionally) The shape
* (Optionally) Access control List Resources

An **LDES in LDP** is initialized in a data pod as an `ldp:BasicContainer` which contains the root of the LDES, a first fragment and extra metadata about this container. More info can be found in the [initialisation section](#initialising)

The information about the about the **Event Stream** and its **view** (which uses the [[!TREE]] hypermedia and [[!LDES]] specification) can be found in the metadata resource of the root `{container}` of the LDES.
<!-- The **root** resource contains metadata about the **Event Stream** and its **view** using the [[!TREE]] hypermedia and [[!LDES]] vocabulary. -->
The **view** consists of several `tree:relation`s which contain information about the **fragments** of the **Event Stream**.

Each **Fragment** of an **LDES in LDP** is an `ldp:BasicContainer`. The LDP Resources present in a fragment (indicated by `ldp:contains`), are the members of the **Event Stream**.

Below is an example of a [root](#root)<!--,where `http://example.org/{container}/` is the base URI of the LDES in LDP-->.
It consists of two `tree:relation`s. The first one indicating that all members, which were created after December the 15th and before December the 16th, can be found by traversing to node `http://example.org/{container}/1639526400000/`.

<div class="example" highlight="turtle" id="root"> 
```turtle
@prefix : <http://example.org/{container}/#> .
<http://example.org/{container}/> rdf:type tree:Node ;
    tree:relation [ 
        a tree:GreaterThanOrEqualToRelation ;
        tree:node <http://example.org/{container}/1639526400000/> ;
        tree:path dct:modified ;
        tree:value "2021-12-15T00:00:00.000Z"^^xsd:dateTime
        ], [
        a tree:GreaterThanOrEqualToRelation ;
        tree:node <http://example.org/{container}/1639612800000/> ;
        tree:path dct:modified ;
        tree:value "2021-12-16T00:00:00.000Z"^^xsd:dateTime
        ] .

:EventStream a <https://w3id.org/ldes#EventStream> ;
    tree:shape <http://example.org/{container}/shape> ;
    tree:view <http://example.org/{container}/root.ttl>.
```
</div>

Note: It is also allowed to have a root resource called `root` in the root container which contains the information about the Event Stream and its view.

## Initialising ## {#initialising}

To initialise an LDES in LDP, the following steps must be performed.

1. Create the root container
2. Create the Even Stream + view information
3. Create the first fragment (more information can be found in its [section](#new-fragment))
4. Add the inbox triple to the root container to make sure the write location is discoverable

## Appending a member ## {#adding-member}

The method for appending a member to the LDES is executed via an HTTP POST request to the **write location** with as body the member.
To indicate the **write location**, a property already defined in the LDP specification is reused: the LDP Inbox (`ldp:inbox`, originated from the [[!LDN]] specification).

A triple of the form `<baseContainer> ldp:inbox <locationURL>.` is added to the metadata of the base container.
This location URL is retrieved via the Link Header as the link value to the relation `ldp:inbox` when sending a GET or HEAD HTTP request (as is defined in [[!LDN]]).

<div class="example" highlight="turtle" id="meta-inbox"> 
An example of the inbox triple.
```turtle
<http://example.org/{container}/> ldp:inbox <http://example.org/{container}/1639612800000/>.
```
</div>

<div class="example" highlight="HTTP" id="head-request">
A HEAD request to the base of an LDES in LDP.
```HTTP
HEAD /{container}/ HTTP/1.1
Host: http://example.org
```

The Link Header in the response of the HEAD request to the LDES in LDP base indicating that `http://example.org/{container}/1639612800000/` is the write location of the LDES in LDP
```HTTP
HTTP/1.1 200
link: <http://example.org/{container}/1639612800000/>; rel="http://www.w3.org/ns/ldp#inbox"
```
</div>

Note: Add that in the body of the POST request, there must be a `<LILBase> tree:member <resource>` triple.

## Creating a new fragment ## {#new-fragment}

The following steps need to be executed to create a new fragment:

1. Create a new `ldp:Container`
2. Add relation triples to the view of the LDES in LDP
3. Update the inbox to link to the newly created container from step 1

[[#view-description]] provides extra information/instructions about **when** to create a new fragment.

## Improving Interoperability ## {#interoperability}

The `tree:shape` property of a [[!TREE]] Collection indicates the data model that all of its members conform to. This data model is called a **shape** and is expressed in a shape language like [[!SHACL]] or [[!SHEX]].

When it is known a priori that the LDES will only have members with a certain predefined data model, it is possible to initialise the LDES in LDP with a shape. 

To enforce shape validation executed by the LDP, the validator requires to know which shape resource to use.
Therefore, the constrained by property of LDP (`ldp:constrainedBy`) will be used to encode an URI to the shape resource in the metadata of each fragment container.

Since all requests to add data that does not conform to the shape will be rejected, the resulting Event Stream consists of members that all conform to the shape.


<div class="example" highlight="turtle" id="meta-shape"> 
Example of the metadata a fragment of an LDES in LDP that is constrained by a shape.
```turtle
<http://example.org/{container}/1639526400000/> tree:shape <http://example.org/{container}/shape>.
```
</div>

Versioned LDES in LDP {#VLIL}
====================

<!-- context about versioning -->

As stated in the [[!LDES]] specification, members are immutable. However, through version-objects, it is possible to indicate changes. 
More information can be found in the [[!LDES]] specification in the section **Version Materializations**.

Two properties MUST be added to the **Event Stream** description for a versioned [[!LDES]].

* `ldes:versionOfPath`: the version of path declares the [[!SHACL]] property path that is used to define that a `tree:member` of an `ldes:EventStream` is a version.
* `ldes:timestampPath`: the timestamp path declares the [[!SHACL]] property path the `xsd:dateTime` (i.e. the timestamp) of the version.

In the examples below, `dct:isVersionOf` is being used to define that a `tree:member` is a version of another member and `dct:issued` is used to denote the DateTime of when a this version was added to the Event Stream.

<div class="example"  highlight="turtle" id="ldes-versioning-1">
An Event Stream with one member which supports versioning (both `ldes:versionOfPath` and `ldes:timestampPath` are defined).
```turtle
ex:ES a ldes:EventStream;
    ldes:versionOfPath dct:isVersionOf;
    ldes:timestampPath dct:issued;
    tree:member ex:resource1v0.

ex:resource1v0
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T10:00:00.000Z"^^xsd:dateTime;
    dct:title "First version of the title".
```
Here, `ex:resource1v0` is the first version of `ex:resource1`.
</div>

<div class="example"  highlight="turtle" id="ldes-versioning-2">
An Event Stream where a member has been updated with a newer version.
```turtle
ex:ES a ldes:EventStream;
    ldes:versionOfPath dct:isVersionOf;
    ldes:timestampPath dct:issued;
    tree:member ex:resource1v0, ex:resource1v1.

ex:resource1v0
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T10:00:00.000Z"^^xsd:dateTime;
    dct:title "First version of the title".
    
ex:resource1v1 
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T12:00:00.000Z"^^xsd:dateTime;
    dct:title "Title has been updated once".
```
Here, a newer version of `ex:resource1` has been created (`ex:resource1v1`), where the title has been changed.
</div>

As can be seen in the example, each member has two version-object triples. Thus in a versioned LDES in LDP, each member MUST have these version-object triples as well.


<!--The [[!LDES]] specification states that all members in an `ldes:EventStream` are immutable. This indicates that a member MUST NOT be changed and implicates that it MUST NOT be deleted. -->
With versioning it SHOULD be possible to mark that a member of an Event Stream has become obsolete.

To mark a member of an Event Stream obsolete, this specification introduces the specific type `ldes:DeletedLDPResource`. This type for a `tree:member` states, when an LDES is used in the context for **LDESinLDP**, that it is marked as deleted from the [[!LDES]].

<div class="example"  highlight="turtle" id="ldes-versioning-3">
An Event Stream where the most recent version of `ex:resource1` is marked as deleted.
```turtle
ex:ES a ldes:EventStream;
    ldes:versionOfPath dct:isVersionOf;
    ldes:timestampPath dct:issued;
    tree:member ex:resource1v0, ex:resource1v1, ex:resource1v2.

ex:resource1v0
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T10:00:00.000Z"^^xsd:dateTime;
    dct:title "First version of the title".
    
ex:resource1v1 
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T12:00:00.000Z"^^xsd:dateTime;
    dct:title "Title has been updated once".

ex:resource1v2
    a ldes:DeletedLDPResource;
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T14:00:00.000Z"^^xsd:dateTime;
    dct:title "Title has been updated once".

```

</div>

Note: It is preferred to mark members as deleted with a custom domain specific type. `ldes:DeletedLDPResource` is used to mark a member to be deleted in the case of LDESinLDP.
Therefore, clients MUST also copy the last contents of the member when a domain specific type is added (which is done in <a href="#ldes-versioning-3">this example</a> as the title is copied from `ex:resource1v1`).

This specification introduces two ways to interact with a versioned LDES in LDP.

* Directly interacting with a versioned LDES in LDP, thus being aware of the LDES in LDP protocol and manually applying versioning.
* Interacting with a versioned LDES in LDP while being agnostic of the protocol. (I.e. it is abstracted away)

## Client managed versioned LDES in LDP ## {#client-managed}

A client can interact with a versioned LDES in LDP by following the protocol either by manually sending the requests or by libraries that have implemented it.

The basic requirements for the client and server are stated in the following subsections.

### Client Implications ### {#client-implication}

In this approach, clients are aware of the [LDES in LDP Protocol](#ldesinldp).
They  know:
* how to initialise an LDES in LDP ([](#initialising))
* how to retrieve the *Write Location* to add a resource to the LDES ([](#adding-member))
    * how to apply versioning of members of the LDES
* how to create a new fragment ([](#new-fragment))

### Server Implications ### {#server-implication}

As a result, any LDP Server Implementation MUST be able to handle the operations executed by the client.

For completeness: the minimum requirements for the LDP Server to comply with the [LDES in LDP Protocol](#ldesinldp):

* SERVER REQUIREMENT: The server MUST allow editing the metadata of containers (such that the `ldp:inbox` or `tree:shape` metadata can be added)
* SERVER REQUIREMENT: The server MUST reply `ldp:inbox` and (OPTIONAL) `ldp:constrainedBy` in Link Headers when performing GET or HEAD requests on a `ldp:BasicContainer` when it is present in its metadata.
* OPTIONAL: The server MAY have shape validation capabilities. When the server does not have those capabilities, the clients MUST only add resources that conform to the shape (when indicated by the root)

<!--Note: The fact that the client is responsible for all actions MAY harm the performance-->

## Server managed versioned LDES in LDP ## {#server-managed}

The versioned LDES in LDP protocol is abstracted away by the LDP API, which enables clients to work with CRUD operation to a versioned LDES.

The client is **agnostic** that version-objects were used to realise the resources. Though the use of those version-objects allows the client to query the history of a given `ldp:Resource`, which can be achieved by incorporating the Memento specification [[!RFC7089]] on top of the LDP ([](#extensions)).
Furthermore, it is possible to engineer additional views on top of the LDES through an LDES server.

An LDP server on top of a versioned LDES in LDP must translate the LDP operations to append and query operations to a versioned LDES. 
To illustrate how the operations can be translated to a versioned LDES, the complete behaviour of interactions with an `ldp:Container` is explained in the following subsection: [](#container).

With this explanation the requirements for such an LDP server (that abstracts away a versioned LDES in LDP) are elaborated, such that they can be build.

### LDP Container ###{#container}

A bi-directional mapping from an LDP Container to a versioned LDES in LDP is provided.

This means that when such an `ldp:container` is created, a versioned ldes in ldp is initialised whereas the container that you request is just a view of the versioned LDES.

An architectural overview of a view of an `ldp:BasicContainer` with two resources which uses a versioned LDES in LDP as backend can be seen in the following <a href="#ldesasbase">figure</a>.

<figure id="ldesasbase">
<img src="./img/Version_Materialized_View.png" />
<figcaption>Architecture where a versioned LDES in LDP is used as a backend for LDP.</figcaption>
</figure>

Operating the CRUD methods to the LDP results into respective interaction with the versioned LDES, which is further elaborated per operation in the following paragraphs.

#### Creating a Resource #### {#create}

An HTTP POST request is used to create a resource in an LDP. 
When a POST request is sent to an LDP Container three things happen: an identifier is created by the server for the created LDP Resource, the body of the request becomes the LDP Resource and metadata is added in the parent `ldp:Container` to indicate that it contains the new resource.

For the server, the LDP behaviour for a POST is just the first step. The second step consists of combining the body of the request with two extra triples to indicate the version-specific representation. 
The newly composed body is then added to the *feed* LDES.

The first triple is to indicate the time of the creation of the Resource, the second triple is the reference to the identifier of the resource.
An example of those triples when the server chose `http://example.org/\{container\}/resource2` as identifier is shown in the <a href="#add-version-triples">example</a> below.

<div class="example" highlight="HTTP" id="post-resource">
An HTTP POST request to create an `ldp:Resource`
```HTTP
POST /{container}/ HTTP/1.1
Host: http://example.org
Slug: resource1
Content-Type: text/turtle

<resource1> dct:title "First version of the title.".
```
</div>

<div class="example" highlight="turtle" id="add-version-triples">
The effect of the POST request that now persists in the versioned LDES in LDP.
```turtle
@prefix : <http://example.org/{container}/> .

:feed/1639612800000/{uuid} tree:member.
:feed/1639612800000/{uuid} dct:title "First version of the title." .
:feed/1639612800000/{uuid} dct:issued "2021-12-16T10:00:00.000Z"^^xsd:dateTime .
:feed/1639612800000/{uuid} dct:isVersionOf :resource1 .
```
</div>

#### Reading a Resource #### {#read}

Reading the above created resource with a GET request using the LDP API will result in the following triple: `<http://example.org/{container}/resource1> dct:title "First version of the title." .`

Note:  When the memento specification ([[!RFC7089]]) is used as an extension, the `Accept-Datetime` request reader can be used to read previous versions of the resource. Additional information can be found in the [[#extensions]]

#### Updating a Resource #### {#update}

Updating LDP Resources can be done in two ways. 
First, there is an HTTP PUT request which replaces the resource with the body that accompanies the request. 
The second option is using an HTTP PATCH request that uses a [[!SPARQL-UPDATE]] or N3 Patch query, where first the server applies the changes and then the result is stored as the updated resource.

An LDP with a versioned LDES in LDP backend stores those updates in the *feed* as the newest version. Thus when using PUT, the whole body of the request together with the version-specific triples are added to *feed*.
After applying the changes using a PATCH request, the resulting resource is accompanied by the version-specific triples and appended to the *feed*.

#### Deleting a Resource #### {#delete}

An HTTP DELETE request to an identifier of a resource results in the removal of that resource and its corresponding metadata in the parent container. In the *feed* however, all the versions are not removed because of two reasons. 
The first one is that an LDES is immutable, meaning that members can not be edited once they are in an LDES.
The second reason is that the history of this resource would be removed as well.

Thus next to the LDP behaviour, an LDP Resource consisting of three triples is added to the *feed* to indicate the resource has been removed. 

An example of such three triples can be seen in the <a href="#ldes-versioning-3">example</a>. They are the triples with as subject `ex:resource1v2`.

Examples {#examples}
=====================

## Metadata notifications ## {#metadata-POC}

At [https://tree.linkeddatafragments.org/announcements/](https://tree.linkeddatafragments.org/announcements/), a public, shape constrained LDES in LDP can be found which is used for publishing metadata of DCAT Application Profiles [[!VOCAB-DCAT-3]] about datasets or data services, or metadata of a [[!TREE]] View.

As LDP, a Community Solid Server [[CSS](https://github.com/solid/community-server)] instance is used with shape support. 
On the server where the CSS resides, the Basic LDES Orchestrator runs.
The trigger for creating new containers is when the current fragment container contains 100 resources or more.

Note: The CSS with shape support can be found at [https://github.com/woutslabbinck/community-server](https://github.com/woutslabbinck/community-server) on branch feat/shape-support

## Solid Event Sourcing project ## {#SES}

A [repository](https://github.com/woutslabbinck/SolidEventSourcing) to publish raw gpx data to a Solid pod. Here each location point is encapsulated as a version-object in a versioned LDES in LDP.

Furthermore, it provides functions with documentation to store any kind of streaming data to a Solid pod.

Extensions {#extensions}
=====================

## Memento ## {#memento}

The [Fedora API Specification](https://fedora.info/2018/11/22/spec/) and [Trellis Linked Data Server](https://www.trellisldp.org/) implement the memento specification ([[!RFC7089]]) on top of [[!LDP]]. This allows dateTime negotiation over `ldp:Resource`s, which provides the historical values of that resource.

In a server managed versioned LDES in LDP, the memento specification can also be provided on top of that abstract LDP implementation. This provides an alternative (complementary to [[!LDES]]) to retrieve a historical version of a given `ldp:Resource`. 
Implementation wise, when an `Accept-DateTime` header is provided, the correct version-object is then queried in the versioned LDES in LDP and provided as response.

## View Description ## {#view-description}

The [[#ldesinldp]] provides instructions on **how** to create a new fragment. However, it does not state **when** to create one.

The **View Description** solves this problem by encapsulating the explicit strategy used to create an [[LDES]] or how it was created.

TODO: add example and explain
<div class="example" highlight="turtle" id="root"> 

```turtle
@prefix : <http://example.org/{container}/#> .
<http://example.org/{container}/> rdf:type tree:Node ;
    tree:relation [ 
        a tree:GreaterThanOrEqualToRelation ;
        tree:node <http://example.org/{container}/1639526400000/> ;
        tree:path dct:modified ;
        tree:value "2021-12-15T00:00:00.000Z"^^xsd:dateTime
        ], [
        a tree:GreaterThanOrEqualToRelation ;
        tree:node <http://example.org/{container}/1639612800000/> ;
        tree:path dct:modified ;
        tree:value "2021-12-16T00:00:00.000Z"^^xsd:dateTime
        ] .

:EventStream a <https://w3id.org/ldes#EventStream> ;
    tree:viewDescription ex:Fragmentation ;
    tree:shape <http://example.org/{container}/shape> ;
    tree:view <http://example.org/{container}/root.ttl>.
  
:Fragmentation a tree:ViewDescription ; 
    dcat:endpointURL :EventStream; # One of the rootnotes from which you can access all members
    dcat:servesDataset <http://example.org/{container}/> ; # the LDES
    ldes:retentionPolicy [
        a ldes:DurationAgoPolicy ;
        # ...
    ];
    ldes:managedBy <client>. # wie is er verantwoordelijk om de structuur van de LDES te onderhouden
    # Options: 
    # * ingester voor een sds:Stream
    # * de client 

<client> a ldes:LDESinLDPClient;
    ldes:bucketizeStrategy ex:BucketizeStrategy.
    # evt property om te zeggen dat er tools zijn om mee te werken e.g. ex:preferedTool VALIL

:BucketizeStrategy a ldes:BucketizeStrategy;
    ldes:bucketType ldes:timestampFragmentation; # zegt aan de client dat ik een timestampfragmentation aan het maken ben ***
    tree:path dct:created; 
    ldes:pageSize 100.
```
</div>

## B+-TREE implementation ## {#b+-tree}

Currently, new Fragments are made as a new container under the base container. This might become a bottleneck if lots of Fragments are present. A possibility is have nested fragments, which results in the LDES in LDP having a [B+ tree structure](https://en.wikipedia.org/wiki/B%2B_tree).

<!-- Might be easier to have multiple levels a priori rather than later?-->
## Multiple members per LDP Resource ## {#multiple-members}

Due to a high velocity of incoming data, the number of HTTP POST requests might add too much overhead.

To overcome this, multiple version-objects can be grouped together into one `ldp:Resource`.


Namespaces {#namespaces}
=====================

Commonly used namespace prefixes used in this specification:
```turtle
@prefix acl: 	<http://www.w3.org/ns/auth/acl#> .
@prefix dct: 	<http://purl.org/dc/terms/> .
@prefix ldes: 	<https://w3id.org/ldes#> .
@prefix ldp: 	<http://www.w3.org/ns/ldp#> .
@prefix rdf: 	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix tree: 	<https://w3id.org/tree#> .
@prefix xsd: 	<http://www.w3.org/2001/XMLSchema#> .
```
