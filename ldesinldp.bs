<pre class='metadata'>
Title: Writing Linked Data Event Streams in LDP Basic Containers
Shortname: LDESinLDP
Level: 1
Status: LD
Group: TREE community group
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Editor: Wout Slabbinck
!Issue Tracking: [Issues](https://github.com/woutslabbinck/LDESinLDP/issues/)
!Issue Tracking: [Github](https://github.com/woutslabbinck/LDESinLDP/)
Repository:no
Abstract: Writing to a time-based fragmented Linked Data Event Stream that is stored on a Linked Data Platform.
</pre>

<pre class=biblio> 
{"ldes": {
	"href":"https://w3id.org/ldes/specification",
	"authors": [
			"Pieter Colpaert"
		],
		"title": "Linked Data Event Streams",
		"status": "LS"
	},
"tree":{
	"href":"https://w3id.org/tree/specification",
	"authors": [
			"Pieter Colpaert"
		],
		"title":"The TREE hypermedia specification",
		"status": "LS"
	},   
"shex": {
    "href": "http://shex.io/shex-semantics/index.html",
    "title": "Shape Expressions Language 2.1",
    "authors": [
        "Eric Prud'hommeaux",
        "Iovka Boneva",
        "Jose Emilio Labra Gayo",
        "Gregg Kellogg"
		]
    },
"solid": {
    "href": "https://solidproject.org/TR/protocol",
    "title": "Solid Protocol",
	"authors": [
        "Sarven Capasdisli",
        "Tim Berners-Lee",
        "Kjetil Kjernsmo",
        "Justin Bingham",
        "Ruben Verborgh",
        "Dmitri Zagidulin"]
    },
"wac": {
    "href": "https://solidproject.org/TR/wac",
    "title": "Web Access Control",
	"authors": [
        "Sarven Capasdisli"],
	"publisher":"W3C Solid Community Group",
	"status":"Draft",
	"data":"11 July 2021"
    }
}
</pre>

Introduction {#introduction}
=====================

We coin the term **LDES in LDP** to describe a time-based fragmented  [[!LDES]] that is stored on a Linked Data Platform [[!LDP]].
Which allows interacting with LDESs using the LDP API.


LDES in LDP Protocol {#ldesinldp}
=====================
<figure id="architecture">
<img src="./img/LDESinLDP_Architecture.png">
<figcaption>Architecture of a Linked Data Event Stream in an LDP Container</figcaption>
</figure>
The **LDES in LDP** Protocol consists of the structure and the rules to create, update and interpret a continuously growing time-based fragmented [[!LDES]] that is stored in an [[!LDP]].

The structure is visualized in the <a href="#architecture">figure</a> above and can be summarized in the following components:

* The `ldp:BasicContainer`, identifyable with an [[!URL]], which is the base of the **LDES in LDP**
* The **root** of the [[!LDES]]
* The fragments
* (Optionally) The shape
* (Optionally) Access control List Resources



An **LDES in LDP** is initialized in a data pod as an `ldp:BasicContainer` which contains the root of the LDES, a first fragment and extra metadata about this container. In the subsections, more details about this metadata will be given.

The **root** resource contains metadata about the **Event Stream** and its **view** using the [[!TREE]] hypermedia and [[!LDES]] vocabulary.
The **view** consists of several `tree:relation`s which contain information about the **fragments** of the **Event Stream**.

Each **Fragment** of an **LDES in LDP** is an `ldp:BasicContainer`. The LDP Resources present in a fragment (indicated by `ldp:contains`), are the members of the **Event Stream**.

Below is an example of a <a href="#root">root</a> <!--,where `http://example.org/{container}/` is the base URI of the LDES in LDP-->.
It consists of one `tree:relation`, where its class and properties indicate that all members, which were created after December the 15th, can be found by traversing to node `http://example.org/{container}/1639526400000/`.

<div class="example" highlight="turtle" id="root"> 
```turtle
@prefix : <http://example.org/{container}/root.ttl#> .
<http://example.org/{container}/root.ttl> rdf:type tree:Node ;
    tree:relation [ 
        a tree:GreaterThanOrEqualToRelation ;
        tree:node <http://example.org/{container}/1639526400000/> ;
        tree:path dct:modified ;
        tree:value "2021-12-15T00:00:00.000Z"^^xsd:dateTime
        ] .

:Collection a <https://w3id.org/ldes#EventStream> ;
    tree:shape <http://example.org/{container}/shape> ;
    tree:view <http://example.org/{container}/root.ttl>

```
</div>

## Adding Resources ## {#adding-resources}

The method for adding a resource remains the same as for a normal LDP Resource creation: with an HTTP POST request. However, an application that adds a member to the Event Stream must know where to write to. 
To indicate the write location, a property already defined in the LDP specification is reused: the LDP Inbox (`ldp:inbox`, originated from the [[!LDN]] specification).

Thus a triple of the form `<baseContainer> ldp:inbox <locationURI>.` is added to the metadata of the base container.
This location URI is retrieved via the Link Header as the link value to the relation `ldp:inbox` when sending a GET or HEAD HTTP request. 

Finally, a member can be added to the LDES with an HTTP POST request to the obtained location URI.

The following <a href="#meta-inbox">example</a> shows the inbox triple. When performing a HEAD <a href="#head-request">request</a> to the base URL (`http://example.org/{container}/`), the Link Header with the write location (`http://example.org/{container}/1639526400000/`) is present in the corresponding <a href="#head-response">response</a>.

<div class="example" highlight="turtle" id="meta-inbox"> 
```turtle
<http://example.org/{container}/> ldp:inbox <http://example.org/{container}/1639526400000/>.
```
</div>

<!--Below are examples of a HEAD <a href="#head-request">request</a> to the base URL and the corresponding <a href="#head-response">response</a> showing the Link Header.-->

<div class="example" highlight="HTTP" id="head-request">
```HTTP
HEAD /{container}/ HTTP/1.1
Host: http://example.org
```
</div>
<div class="example" highlight="HTTP" id="head-response">
```HTTP
HTTP/1.1 200
link: <http://example.org/{container}/1639526400000/>; rel="http://www.w3.org/ns/ldp#inbox"
```
</div>



## Improving Interoperability ## {#interoperability}

The `tree:shape` property of a [[!TREE]] Collection indicates the data model that all of its members conform to. This data model is called a **shape** and is expressed in a shape language like [[!SHACL]] or [[!SHEX]].

When it is known a priori that the LDES will only have members with a certain predefined data model, it is possible to initialise the LDES in LDP with a shape. 

To enforce shape validation executed by the LDP, the validator requires to know which shape resource to use.
Therefore, the constrained by property of LDP (`ldp:constrainedBy`) will be used to encode an URI to the shape resource in the metadata of each fragment container.

Since all requests to add data that does not conform to the shape will be rejected, the resulting Event Stream consists of members that all conform to the shape.


<div class="example" highlight="turtle" id="meta-shape"> 
Example of the metadata a fragment of an LDES in LDP that is constrained by a shape.
```turtle
<http://example.org/{container}/1639526400000/> tree:shape <http://example.org/{container}/shape>.
```
</div>

Basic LDES Orchestrator {#orchestrator}
=====================

The **Basic LDES Orchestrator** is introduced to reduce overhead for the client and perform the operations that not any client is allowed to perform.

This Basic LDES Orchestrator has four roles:

* Creation of a new LDP Container: when the current relation is deemed full, a new container is created with added metadata to indicate shape support
* Writable container indication: at the base container, update the metadata about the LDP Inbox
* Maintain the root of the LDES: add triples with TREE syntax to keep the view up to date
* Access control: when [[!Solid]] is used, the Access Control List (ACL) files must be updated

## Create Containers 

Downloading a document on the internet takes time proportional to the location of the server versus the location of the client, the bandwidth and the size of the document. 
Designing LDES in LDP while minimizing that time, results in controlling the size of documents where possible: the container size.
When a container contains a large number of resources,  the serialization of the information of that container is large as well.
This results in a bottleneck for the performance as loading the container page takes longer. 

To overcome this bottleneck, every time the current container page is deemed full, a new, empty container is created.
Furthermore, when the LDES in LDP is initialised with a shape, metadata must be added to this container to further impose this constraint, see [](#interoperability).

## Writable Container Indication 

When a new container is created, the Inbox must be updated as well. 
Clients that want to add a member to the LDES can then find the container where they can write new resources, see [](#adding-resources).

It is the responsibility of the Orchestrator to update that triple in the metadata.

## Maintain the View 

The [[!TREE]] hypermedia specification states that a view of a collection must reach all its members. 
Therefore on each creation of a new container, which is a new fragment of the collection, the view must be updated. 
Thus a relation is added in the root by the Orchestrator for each new fragment.

## Update ACL Files 

In case a [[!Solid]] pod is used as a back-end, ACL resources (defined by the Web Acces Control [[!WAC]] specification) are responsible for making sure that it is impossible to add new resources to containers that are not indicated as writeable. 
With an ACL resource in place in the current fragment container, it is enforced that only new resources may be added there.
This is done by providing read (`acl:read`) and append (`acl:append`) rights in the ACL resource of that container.

Note: The orchestrator must have `acl:Control` for the base container and each fragment container to be able to update the ACL resources.

## Sequence Diagram

<!--Now that all the roles are elaborated, they are joined together in an arrangement to manage the growth of the LDES in LDP. -->
<a href="sequence_diagram">The figure below</a> shows the operations that the Orchestrator performs each time a new fragment is created for the case of a public LDES in LDP.

<figure id="sequence_diagram">
<img src="./img/LDES_Write-Orchestrator.png">
<figcaption>Sequence diagram of the Basic LDES Orchestrator for a public LDES in LDP</figcaption>
</figure>

Note: An implementation of the Basic LDES Orchestrator can be found on **npm**: [LDES Orchestrator](https://www.npmjs.com/package/@treecg/ldes-orchestrator)

Versioning Approaches {#approaches}
=====================
There are two approaches to use **LDES in LDP**:

* A **Version-Aware** approach: Here the client is writing and reading directly to the **LDES in LDP** as it is knowledgeable about [](#ldesinldp) of this specification. Furthermore, it knows how to update a resource using **Version Materializations** from the [[!LDES]] specification.
* A **Version-Agnostic** approach: Here the client is not knowledgeable about [](#ldesinldp). The client interacts with the server with the [[!LDP]] API. **LDES in LDP** is used as a back-end by the server and it is abstracted away from the client.

## Versioning

[[!LDES]] supports versioning of resources through [Version Materializations](https://semiceu.github.io/LinkedDataEventStreams/#version-materializations).
To support versioning, an `ldes:EventStream` MUST define two properties: `ldes:versionOfPath` and `ldes:timestampPath`.

`ldes:versionOfPath` declares the property that is used to define that a `tree:member` of an `ldes:EventStream` is a version.

`ldes:timestampPath` declares the property that is used to define the DateTime of a `tree:member`.

In the examples below, `dct:isVersionOf` is being used to define that a `tree:member` is a version of another member and `dct:issued` is used to denote the DateTime of when a this version was added to the Event Stream.

<div class="example"  highlight="turtle" id="ldes-versioning-1">
An Event Stream with one member which supports versioning (both `ldes:versionOfPath` and `ldes:timestampPath` are defined).
```turtle
ex:ES a ldes:EventStream;
    ldes:versionOfPath dct:isVersionOf;
    ldes:timestampPath dct:issued;
    tree:member ex:resource1v0.

ex:resource1v0
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T10:00:00.000Z"^^xsd:dateTime;
    dct:title "First version of the title".
```
Here, `ex:resource1v0` is the first version of `ex:resource1`.
</div>

<div class="example"  highlight="turtle" id="ldes-versioning-2">
An Event Stream where a member has been updated with a newer version.
```turtle
ex:ES a ldes:EventStream;
    ldes:versionOfPath dct:isVersionOf;
    ldes:timestampPath dct:issued;
    tree:member ex:resource1v0, ex:resource1v1.

ex:resource1v0
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T10:00:00.000Z"^^xsd:dateTime;
    dct:title "First version of the title".
    
ex:resource1v1 
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T12:00:00.000Z"^^xsd:dateTime;
    dct:title "Title has been updated once".
```
Here, a newer version of `ex:resource1` has been created (`ex:resource1v1`), where the title has been changed.
</div>


### Deleting a member

The [[!LDES]] specification states that all members in an `ldes:EventStream` are immutable. This indicates that a member MUST NOT be changed and implicates that it MUST NOT be deleted.

With versioning, however, it SHOULD be possible to mark that a member of an Event Stream has become obsolete.

Therefore, this specification introduces the specific type `ldes:DeletedLDPResource`. This type for a `tree:member` states, when an LDES is used in the context for **LDESinLDP**, that it is marked as deleted from the [[!LDES]].

<div class="example"  highlight="turtle" id="ldes-versioning-2">
An Event Stream where the most recent version of `ex:resource1` is marked as deleted.
```turtle
ex:ES a ldes:EventStream;
    ldes:versionOfPath dct:isVersionOf;
    ldes:timestampPath dct:issued;
    tree:member ex:resource1v0, ex:resource1v1, ex:resource1v2.

ex:resource1v0
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T10:00:00.000Z"^^xsd:dateTime;
    dct:title "First version of the title".
    
ex:resource1v1 
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T12:00:00.000Z"^^xsd:dateTime;
    dct:title "Title has been updated once".

ex:resource1v2
    a ldes:DeletedLDPResource;
    dct:isVersionOf ex:resource1;
    dct:issued "2021-12-15T14:00:00.000Z"^^xsd:dateTime;
    dct:title "Title has been updated once".

```

</div>

Note: It is preferred to mark members as deleted with a custom domain specific type. `ldes:DeletedLDPResource` is used to mark a member to be deleted in the case of LDESinLDP.
Therefore, clients MUST also copy the last contents of the member when a domain specific type is added (which is done in <a href="#ldes-versioning-2">this example</a> as the title is copied from `ex:resource1v1`).

## Version-Aware Approach

### Client Implications

In this approach, clients are aware of the [LDES in LDP Protocol](#ldesinldp).
They  know:
* how to retrieve the *Write Location* to add a resource to the LDES ([](#adding-resources))
* how to apply versioning of members of the LDES ([](#versioning))
* know that the Basic LDES Orchestrator running in the background (either initiated by them or by the owner of the LDES in LDP) ([](#orchestrator))

### Server Implications

As a result, any LDP Server Implementation SHOULD be able to handle the operations executed by the client and the Basic LDES Orchestrator without modifications.

For completeness: the minimum requirements for the LDP Server to comply with the [LDES in LDP Protocol](#ldesinldp) and the [Basic LDES Orchestrator](#orchestrator) are listed below:
* SERVER REQUIREMENT: The server MUST allow editing the metadata of containers (such that the `ldp:inbox` or `tree:shape` metadata can be added)
* SERVER REQUIREMENT: The server MUST reply `ldp:inbox` and (OPTIONAL) `ldp:constrainedBy` in Link Headers when performing GET or HEAD requests on a `ldp:BasicContainer` when it is present in its metadata.
* OPTIONAL: The server MAY have shape validation capabilities. When the server does not have those capabilities, the clients MUST only add resources that conform to the shape (when indicated by the root)

Note: Currently the  Basic LDES Orchestrator  only works with the [Community Solid Server](https://github.com/solid/community-server)

<!--Note: The fact that the client is responsible for all actions MAY harm the performance-->


## Version-Agnostic Approach

In contrast to the [Version-Aware Approach](#version-aware-approach), where a client is required to know everything, with a Version-Agnostic approach only knowledge about the LDP API is required.

<!-- Therefore, a proposal is being presented that combines the simplicity to perform CRUD operations with RDF data on an LDP and the expressivity of an LDES in LDP. Here, the LDES in LDP is used as the source for the resources that are shown in the LDP. -->

### Architecture ### {#version-agnostic-architecture}

<a href="#ldesasbase">The architecture figure</a> shows the structure when the LDP is combined with the **LDES in LDP**.
The resources that are present in the `{container}` are a view derived from the LDES in *feed*, which is stored as an **LDES in LDP**. 

More specifically `{container}` is a view, represented as an `ldp:BasicContainer`, that 
contains links to the original members of the Event Stream via `ldp:contains`.
Dereferencing that link, leads to an LDP Resource that has the latest version of that member as content.

When a resource has multiple versions (e.g. due to it being edited), only the latest version will be shown as the LDP Resource.

Note: The whole history of those resources can be retrieved from the *feed*.

<figure id="ldesasbase">
<img src="./img/Version_Materialized_View.png" />
<figcaption>Architecture when LDES is used as base in a version-agnostic approach</figcaption>
</figure>

The abstraction of the **LDES in LDP** through the LDP API results in several modifications to Creating, Reading, Updating and Deleting a Resource.

How to read the resources is already explained in the first paragraphs of the architecture. 
The other operations are explained in the subsections below.
<!-- With this proposal, reading from an LDES in LDP for clients who are not aware is thus solved. 
Though to use this feed as storage and let the LDP still appear as normal while creating, updating and deleting resources, additional modifications are required. -->

### Creating

An HTTP POST request is used to create a resource in an LDP. 
When a POST request is sent to an LDP Container three things happen: an identifier is created by the server for the created LDP Resource, the body of the request becomes the LDP Resource and metadata is added in the parent `ldp:Container` to indicate that it contains the new resource.

For  Version-Agnostic implementations, the LDP behaviour for a POST is just the first step. The second step consists of combining the body of the request with two extra triples to indicate the version-specific representation. 
The newly composed body is then added to the *feed* LDES.

The first triple is to indicate the time of the creation of the Resource, the second triple is the reference to the identifier of the resource.
An example of those triples when the server chose `http://example.org/\{container\}/resource2` as identifier is shown in the <a href="#add-version-triples">example</a> below.

<div class="example" highlight="turtle" id="add-version-triples">
```turtle
@prefix : <http://example.org/{container}/> .

:feed/1639612800000/{uuid} dct:issued "2021-12-16T10:00:00.000Z"^^xsd:dateTime .
:feed/1639612800000/{uuid} dct:isVersionOf :resource2 .
```
</div>

Note: When a slug is provided in the Header of a POST request, a server can choose to use that slug as an identifier.

### Updating

Updating LDP Resources can be done in two ways. 
First, there is an HTTP PUT request which replaces the resource with the body that accompanies the request. 
The second option is using an HTTP PATCH request that uses a [[!SPARQL-UPDATE]]  query, where first the server applies the changes and then the result is stored as the updated resource.

An LDP with Version-Agnostic LDES in LDP  support stores those updates in the *feed* as the newest version. Thus when using PUT, the whole body of the request together with the version-specific triples are added to *feed*.
After applying the changes using a PATCH request, the resulting resource is accompanied by the version-specific triples and appended to the *feed*.

### Deleting

An HTTP DELETE request to an identifier of a resource results in the removal of that resource and its corresponding metadata in the parent container. In the *feed* however, all the versions are not removed because of two reasons. 
The first one is that an LDES is immutable, meaning that members can not be edited once they are in an LDES.
The second reason is that the history of this resource would be removed as well.

Thus next to the LDP behaviour, an LDP Resource consisting of three triples is added to the *feed* to indicate the resource has been removed. 

An example of such three triples can be seen in the <a href="#ldes-versioning-2">example</a> in [](#deleting-a-member). They are the triples with as subject `ex:resource1v2`.


Examples {#examples}
=====================

## Metadata notifications

At [https://tree.linkeddatafragments.org/announcements/](https://tree.linkeddatafragments.org/announcements/), a public, shape constrained LDES in LDP can be found which is used for publishing metadata of DCAT Application Profiles [[!VOCAB-DCAT-3]] about datasets or data services, or metadata of a [[!TREE]] View.

As LDP, a Community Solid Server [[CSS](https://github.com/solid/community-server)] instance is used with shape support. 
On the server where the CSS resides, the Basic LDES Orchestrator runs.
The trigger for creating new containers is when the current fragment container contains 100 resources or more.

Note: The CSS with shape support can be found at [https://github.com/woutslabbinck/community-server](https://github.com/woutslabbinck/community-server) on branch feat/shape-support

Note: The Orchestrator uses the following package: [LDES Orchestrator](https://www.npmjs.com/package/@treecg/ldes-orchestrator)

Namespaces {#namespaces}
=====================

Commonly used namespace prefixes used in this specification:
```turtle
@prefix acl: 	<http://www.w3.org/ns/auth/acl#> .
@prefix dct: 	<http://purl.org/dc/terms/> .
@prefix ldes: 	<https://w3id.org/ldes#> .
@prefix ldp: 	<http://www.w3.org/ns/ldp#> .
@prefix rdf: 	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix tree: 	<https://w3id.org/tree#> .
@prefix xsd: 	<http://www.w3.org/2001/XMLSchema#> .
```
