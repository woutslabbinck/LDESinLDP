<pre class='metadata'>
Title: LDES in LDP
Shortname: LDESinLDP
Level: 1
Status: LD
Group: TREE community group
<!-- URL: https://w3id.org/ldes/specification -->
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Editor: Wout Slabbinck
<!-- Repository: https://github.com/SEMICeu/LinkedDataEventStreams -->
Abstract: Writing to a time-based fragmented Linked Data Event Stream that is stored on a Linked Data Platform.
</pre>
<pre class=biblio> 
{"ldes": {
      "href":"https://w3id.org/ldes/specification",
      		"authors": [
			"Pieter Colpaert"
		],
		"title": "Linked Data Event Streams",
		"status": "LS"
	},
"tree":{
		"href":"https://w3id.org/tree/specification",
      		"authors": [
			"Pieter Colpaert"
		],
		"title":"The TREE hypermedia specification",
		"status": "LS"

	}
}
</pre>
Introduction {#introduction}
=====================

We coin the term **LDES in LDP** to describe a time-based fragmented  [[LDES]] that is stored on a Linked Data Platform [[!LDP]].
Which allows to interact with LDESs using the LDP API.


LDES in LDP {#ldesinldp}
=====================

An LDES is initialized in a data pod as a container and identifyable with an URI.
In this container, the view (a root node) is found
<!-- \footnote{The view can be found at containerURI/}\textbf{root.ttl}}  -->
which contains relations to fragments of the LDES. 
Finally, a fragment container consists of several LDP resources, indicated by *ldp:contains*.
<!-- \footnote{\url{https://www.w3.org/ns/ldp#contains}}. -->

Below is an example of a <a href="#root">root</a>, where *http://example.org/{container}* is the base URI of the LDES in LDP.
This root consists of one [[TREE]] hypermedia Relation, where its class and properties indicate that all members which were created after December the 15th can be found by traversing to node *http://example.org/{container}/1639526400000/*

<div class="example" highlight="turtle" id="root"> 
```turtle
@prefix : <http://example.org/{container}/root.ttl#> .

<http://example.org/{container}/root.ttl> rdf:type tree:Node ;
    tree:relation [ 
        a tree:GreaterThanOrEqualToRelation ;
        tree:node <http://example.org/{container}/1639526400000/> ;
        tree:path dct:modified ;
        tree:value "2021-12-15T00:00:00.000Z"^^xsd:dateTime
        ] .

:Collection a <https://w3id.org/ldes#EventStream> ;
    tree:shape <http://example.org/{container}/shape> ;
    tree:view <http://example.org/{container}/root.ttl>
```
</div>

## Adding a Resources ## {#adding-resources}
The method for adding a resource remains the same as for a normal LDP Resource creation: with an HTTP POST request. However, an application that adds a member to the Event Stream must know where to write to. 
To indicate the write location, a property already defined in the LDP specification is reused: the LDP Inbox (`ldp:inbox`, originated from the [[!LDN]] specification).

Thus a triple of the form `<baseContainer> ldp:inbox <locationURI>.` is added to the metadata of the base container.
This location URI is retrieved via the Link Header as the link value to the relation `ldp:inbox` when sending a GET or HEAD HTTP request. 

Below are examples of a HEAD <a href="#head-request">request</a> to the base URI and its <a href="#head-response">response</a> showing the Link Header response.

<div class="example" highlight="HTTP" id="head-request">
```HTTP
HEAD /{container}/ HTTP/1.1
Host: http://example.org
```
</div>
<div class="example" highlight="HTTP" id="head-response">
```HTTP
HTTP/1.1 200
link: <http://example.org/{container}/1639526400000/>; rel="http://www.w3.org/ns/ldp#inbox"
```
</div>

Finally, a member can be added to the LDES with an HTTP POST request to the obtained location URI.

## Improving Interoperability ## {#interoperability}
When it is known a priori that the LDES will only have members with a certain predefined data model, it is possible to initialise the LDES in LDP with a shape. Thanks to shapes allowing to define the structure and constraints of RDF resources.

To enforce shape validation executed by the LDP, the validator requires to know which shape resource to use.
Therefore, the constrained by property of LDP(`ldp:constrainedBy`} will be used to encode an URI to the shape resource in the metadata of each fragment container.

Since all requests to add data that does not conform to the shape will be rejected, the resulting Event Stream consists of members that all conform to the shape.

Basic LDES Orchestrator {#orchestrator}
=====================

To make a Linked Data Event Stream scalable, the ever-growing LDES was introduced. 
This complicates the writing process as it requires clients to create new containers, know the current write location and maintain the root. 
Furthermore, clients do not always have permissions to update certain parts of the LDES in LDP.

An active service component is required to orchestrate the writing process, which removes overhead for the clients and executes tasks that clients themselves can not perform. 
For this, we introduce a service called the Basic LDES Orchestrator (henceforth shortened as Orchestrator).

This Orchestrator has four roles:

* Creation of new LDP Container: when the current relation is deemed full, a new container is created with added metadata to indicate shape support
* Writable container indication: at the base container, update the metadata about the LDP Inbox
* Maintain the root of the LDES: add triples with TREE syntax to keep the view up to date
* Access control: when Solid is used, the Access Control List (ACL) files must be updated

## Create Containers 

Downloading a document on the internet takes time proportional to the location of the server versus the location of the client, the bandwidth and the size of the document. 
Designing LDES in LDP while minimizing that time, results in controlling the size of documents where possible: the container size.
When a container contains a large number of resources,  the serialization of the information of that container is large as well.
This results in a bottleneck for the performance as loading the container page takes longer. 

To overcome this bottleneck, every time the current container page is deemed full, a new, empty container is created.
Furthermore, when the LDES in LDP is initialised with a shape, metadata must be added to this container to further impose this constraint.

## Writable Container Indication 

When a new container is created, the Inbox must be updated as well. 
Clients that want to add a member to the LDES can then find the container where they can write new resources.
It is the responsibility of the Orchestrator to update that triple in the metadata.

## Maintain the View 

The TREE Hypermedia specification states that a view of a collection must reach all its members. 
Therefore on each creation of a new container, which is a new fragment of the collection, the view must be updated. 
Thus a relation is added in the root by the Orchestrator for each new fragment.

## Update ACL Files 

In case a Solid pod is used as a back-end, ACL resources are responsible for making sure that it is impossible to add new resources to containers that are not indicated as writeable. 
With an ACL resource in place in the current fragment container, it is enforced that only new resources may be added there.
This is done by providing read (`acl:read`) and append (`acl:append`) rights in the ACL resource of that container.



Implementation {#implementation}
=====================

Note: This section is still under construction

## Version-Aware Implementation
When an application knows how to append to an LDES in LDP, it may add updates of resources directly to the *feed*. 
As stated previously, this would also change the contents of the LDP Container because it is just a derived view of the *feed*.


## Version-Agnostic Implementation

With LDES in LDP it is possible to build up the history of a given resource using the Version Materializations of that resource, and synchronize and replicate this LDES with the use of LDES Action and LDES Client.
<!--\footnote{Version Materializations defined in the LDES specification \url{https://semiceu.github.io/LinkedDataEventStreams/\#version-materializations}}\footnote{\url{https://github.com/TREEcg/event-stream-client} \cite{van_lancker_publishing_2021}}.-->
Unfortunately, not all clients can understand LDES in LDP.

Therefore, a proposal is being presented that combines the simplicity to perform CRUD operations with RDF data on an LDP and the expressivity of an LDES in LDP. Here, the LDES in LDP is used as the source for the resources that are shown in the LDP.

### Architecture
<a>The architecture figure</a> shows the structure when the LDP is combined with the LDES in LDP. The resources that are present in the `{container}` are a view derived from the LDES in *feed*, which is stored as an LDES in LDP. More specifically a view that only contains the latest version of a given member in the Event Stream.
Thus when a resource has multiple versions (e.g. due to it being edited) only the latest version will be shown in the LDP. However, the whole history of those resources can be retrieved from the *feed*.

Note: Figure about architecture should come here

With this proposal, reading from an LDES in LDP for clients who are not aware is thus solved. 
Though in order to use this feed as storage and let the LDP still appear as normal while creating, updating and deleting resources, additional modifications are required.

### Creating

An HTTP POST request is used to create a resource in an LDP. 
When a POST request is sent to an LDP Container three things happen: an identifier is created by the server\footnote{When a slug is provided in the Header of the request, a server can choose to use that slug as an identifier.} for the created LDP Resource, the body of the request becomes the LDP Resource and metadata is added in the container to indicate that it contains the new resource.
 
For LDES Write, the LDP behaviour for a POST is just the first step. After that, the body of the request is combined with two extra triples to indicate the version-specific representation. 
This is then added to the \textit{feed} LDES.

The first triple is to indicate the time of the creation of the Resource, the second triple is the reference to the identifier of the resource.
An example of those triples when the server chose `http://example.org/\{container\}/resource2` as identifier is shown in \cref{lst:LDES_Write_added_triples}.

```turtle
@prefix : <http://example.org/{container}/> .

:feed/1639612800000/{uuid} dct:issued "2021-12-16T10:00:00.000Z"^^xsd:dateTime .
:feed/1639612800000/{uuid} dct:isVersionOf :resource2 .
``` 

### Updating

Updating LDP Resources can be done in two ways. 
First, there is an HTTP PUT request which replaces the resource with the body that accompanies the request. 
The second option is using an HTTP PATCH request that uses a SPARQL Update \cite{gearon_sparql_2013} query, where first the server applies the changes and then the result is stored as the updated resource.

An LDP with LDES Write support stores those updates in the *feed* as the newest version. Thus when using PUT, the whole body of the request together with the version-specific triples are added to *feed*.
After applying the changes using a PATCH request, the resulting resource is accompanied with  the version-specific triples and appended to the *feed*.

### Deleting

An HTTP DELETE request to an identifier of a resource results in the removal of that resource and its corresponding metadata in the parent container. In the *feed* however, all the versions are not removed because of two reasons. 
The first one is that an LDES is immutable, meaning that members can not be edited once they are in an LDES.
The second reason is that the history of this resource would be removed as well.

Thus next to the LDP behaviour, an item consisting of three triples is added to the *feed* to indicate a resource has been removed. 
Two of those triples are the version-specific ones, the last one is just an indication that the resource has been removed from the LDP. 
For this last triple `<https://example.org/versionMemberURI> ldes:state ldes:removed .` is proposed.

Examples {#examples}
=====================

Note: This section is still under construction

## Metadata notifications

### Sequence Diagram

Now that all the roles are elaborated, they are joined together in an arrangement to manage the growth of the LDES in LDP. 
\Cref{fig:orchestrator} shows the operations that the Orchestrator performs each time a new fragment is created for the case of a public LDES in LDP.

\begin{figure}
\includegraphics[width=\textwidth]{img/LDES_Write-Orchestrator.pdf}
\caption{Sequence diagram of the Basic LDES Orchestrator for a public LDES in LDP} \label{fig:orchestrator}
\end{figure}

\subsubsection{Architecture}
In \cref{fig:ldes-in-ldp-architecture} the LDP (here a Solid Community Server (CSS) \cite{noauthor_community_2022}), the LDES in LDP and the Basic LDES Orchestrator are merged together as the complete architecture. This overview shows clearly the structure of the LDES. The base container contains one or more \textit{fragments} and the \textit{root} of the LDES, a \textit{metadata} resource and the \textit{shape}. 
The \textit{metadata} resource indicates the fragment that is writable.
The \textit{root} resource contains the Event Stream and the view with relations to all LDP containers (fragments) in \textit{\{container\}}. 
Each fragment contains an \textit{ACL resource}, a \textit{metadata resource} and several other LDP Resources which are the members of the Event Stream. 
In the metadata, a constraint is placed to indicate that all members conform to the \textit{shape}. 

Finally, the Orchestrator is responsible for creating new fragments when the current one is deemed full.

\begin{figure}
\centering
\includegraphics[width=.6\textwidth]{img/LDES_Write-Architecture.pdf}
\caption{Architecture of the LDES in LDP} \label{fig:ldes-in-ldp-architecture}
\end{figure}

\subsubsection{Real Example} 
At \url{https://tree.linkeddatafragments.org/announcements/}, a public, shape constrained LDES in LDP can be found which is used for publishing metadata of DCAT Application Profiles \cite{albertoni_data_2020} about datasets or data services, or metadata of a TREE View.
As LDP, a CSS instance is used with shape support\footnote{Branch feat/shape-support at \url{https://github.com/woutslabbinck/community-server}}. On the server where it CSS resides, the Basic LDES Orchestrator runs  where a fragment container is deemed full when 100 resources or more are present \footnote{The Orchestrator uses the following package: \url{https://www.npmjs.com/package/@treecg/ldes-orchestrator}.}.

Namespaces {#namespaces}
=====================

Commonly used namespace prefixes used in this specification:
```turtle
@prefix acl: 	<http://www.w3.org/ns/auth/acl#> .
@prefix dct: 	<http://purl.org/dc/terms/> .
@prefix ldes: 	<https://w3id.org/ldes#> .
@prefix ldp: 	<http://www.w3.org/ns/ldp#> .
@prefix rdf: 	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix tree: 	<https://w3id.org/tree#> .
@prefix xsd: 	<http://www.w3.org/2001/XMLSchema#> .
```